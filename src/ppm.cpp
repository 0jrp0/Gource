/*
    Copyright (C) 2009 Johannes Schindelin (johannes.schindelin@gmx.de)

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version
    3 of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "ppm.h"

extern "C" {
static int dumper_thread(void *arg) {
    FrameExporter *e = static_cast<FrameExporter *>(arg);

    e->dumpThr();

    return 0;
}
};

// FrameExporter

FrameExporter::FrameExporter()
    : surface(NULL), pixels(NULL), rowstride(0) {

    //this now assumes the display is setup
    //before the frame exporter is created
    //(which seems reasonable)
    surface = SDL_GetVideoSurface();

    rowstride     = surface->w * 3;
    surfacepixels = new char[(surface->h) * rowstride];
    pixels        = new char[(surface->h) * rowstride];

    cond   = SDL_CreateCond();
    mutex  = SDL_CreateMutex();
    thread = SDL_CreateThread( dumper_thread, this );
}

FrameExporter::~FrameExporter() {

    if(dumper_thread_state != FRAME_EXPORTER_EXIT) {
        SDL_mutexP(mutex);

        dumper_thread_state = FRAME_EXPORTER_EXIT;

        SDL_CondSignal(cond);
        SDL_mutexV(mutex);
    }

    /* wait for thread to quit, then tear down */
    SDL_KillThread(thread);
    SDL_DestroyCond(cond);
    SDL_DestroyMutex(mutex);

    delete[] surfacepixels;
    delete[] pixels;
}

void FrameExporter::dump() {

    SDL_mutexP(mutex);

    glReadPixels(0, 0, surface->w, surface->h,
        GL_RGB, GL_UNSIGNED_BYTE, surfacepixels);

    dumper_thread_state = FRAME_EXPORTER_DUMP;

    SDL_CondSignal(cond);
    SDL_mutexV(mutex);
}

void FrameExporter::dumpThr() {

    SDL_mutexP(mutex);

    for (;;) {
    	while (dumper_thread_state == FRAME_EXPORTER_WAIT)
            SDL_CondWait(cond, mutex);

        if (dumper_thread_state == FRAME_EXPORTER_EXIT) break;

        //invert
        for(int y=0;y<surface->h;y++) {
            for(int x=0;x<rowstride;x++) {
                pixels[x + y * rowstride] = surfacepixels[x + (surface->h - y - 1) *rowstride];
            }
        }

        dumpImpl();

        dumper_thread_state = FRAME_EXPORTER_WAIT;
    }

    SDL_mutexV(mutex);
}

// PPMExporter

PPMExporter::PPMExporter(std::string outputfile) {

    if(outputfile == "-") {
        output = &std::cout;

    } else {
        filename = outputfile;
        output   = new std::fstream(outputfile.c_str(), std::ios::out | std::ios::binary);

        if(output->fail()) {
            printf("Failed to open '%s' for writing\n", outputfile.c_str());
            exit(1);
        }
    }

    //write header
    sprintf(ppmheader, "P6\n# Generated by Gource\n%d %d\n255\n",
        surface->w, surface->h
    );

	dumper_thread_state = FRAME_EXPORTER_WAIT;
}

PPMExporter::~PPMExporter() {
    SDL_mutexP(mutex);

    dumper_thread_state = FRAME_EXPORTER_EXIT;

    SDL_CondSignal(cond);
    SDL_mutexV(mutex);

    if(filename.size()>0)
        ((std::fstream*)output)->close();
}

void PPMExporter::dumpImpl() {
    *output << ppmheader;
    output->write(pixels, rowstride * surface->h);
}
